!=======================================================================
! Generated by: PSCAD v5.0.2.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : IBR
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE IBRDyn()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    Simple_PPCDyn  ! 
!     SUBR    VSCDyn        ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      REAL     RT_1, RT_2, RT_3, RT_4, RT_5, RT_6
      REAL     Q_POC, P_POC, Vrms_POC, RT_7
      REAL     PPC_Kp_Q, PPC_Ti_Q, PPC_Kp_PF
      REAL     PPC_Ti_PF, PPC_Kp_V, PPC_Ti_V
      REAL     PPC_Ti_P, PPC_Kp_P, RT_8, RT_9
      REAL     RT_10, F_POI, DBlk, RampUp_Pref
      REAL     RampDown_Pref, Igrid_POC(3)
      REAL     Vgrid_POC(3)

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOF, IT_0                         ! Storage Indices
      INTEGER ICX, IPGB                           ! Control/Monitoring
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOF     = NSTOF
      NSTOF     = NSTOF + 31
      IPGB      = NPGB
      NPGB      = NPGB + 4
      ICX       = NCX
      NCX       = NCX + 13
      INODE     = NNODE + 2
      NNODE     = NNODE + 11
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 15

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_1     = STOF(ISTOF + 1)
      RT_2     = STOF(ISTOF + 2)
      RT_3     = STOF(ISTOF + 3)
      RT_4     = STOF(ISTOF + 4)
      RT_5     = STOF(ISTOF + 5)
      RT_6     = STOF(ISTOF + 6)
      Q_POC    = STOF(ISTOF + 7)
      P_POC    = STOF(ISTOF + 8)
      Vrms_POC = STOF(ISTOF + 9)
      RT_7     = STOF(ISTOF + 10)
      PPC_Kp_Q = STOF(ISTOF + 11)
      PPC_Ti_Q = STOF(ISTOF + 12)
      PPC_Kp_PF = STOF(ISTOF + 13)
      PPC_Ti_PF = STOF(ISTOF + 14)
      PPC_Kp_V = STOF(ISTOF + 15)
      PPC_Ti_V = STOF(ISTOF + 16)
      PPC_Ti_P = STOF(ISTOF + 17)
      PPC_Kp_P = STOF(ISTOF + 18)
      RT_8     = STOF(ISTOF + 19)
      RT_9     = STOF(ISTOF + 20)
      RT_10    = STOF(ISTOF + 21)
      F_POI    = STOF(ISTOF + 22)
      DBlk     = STOF(ISTOF + 23)
      RampUp_Pref = STOF(ISTOF + 24)
      RampDown_Pref = STOF(ISTOF + 25)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         Igrid_POC(IT_0) = STOF(ISTOF + 25 + IT_0)
         Vgrid_POC(IT_0) = STOF(ISTOF + 28 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'IBR.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[var_switch] Two State Switch 'Deblock'
      DBlk = CX(CXMAP(ICX+1))

! 30:[var] Variable Input Slider 'RampUp_Pref'
      RampUp_Pref = CX(CXMAP(ICX+2))

! 50:[var] Variable Input Slider 'Vref'
      RT_6 = CX(CXMAP(ICX+3))

! 60:[var] Variable Input Slider 'RampDown_Pref'
      RampDown_Pref = CX(CXMAP(ICX+4))

! 70:[var] Variable Input Slider 'Pref'
      RT_7 = CX(CXMAP(ICX+5))

! 80:[ratelimit] Rate Limiter 
!  C/s
      CALL RATE_LIMITER(RampUp_Pref,RampDown_Pref,RT_7,RT_5)

! 90:[const] Real Constant 
      RT_4 = 0.0

! 110:[const] Real Constant 
      RT_3 = 1.0

! 120:[var] Variable Input Slider 'PPC_Kp_P'
      PPC_Kp_P = CX(CXMAP(ICX+6))

! 130:[var] Variable Input Slider 'PPC_Kp_V'
      PPC_Kp_V = CX(CXMAP(ICX+7))

! 140:[var] Variable Input Slider 'PPC_Kp_PF'
      PPC_Kp_PF = CX(CXMAP(ICX+8))

! 150:[var] Variable Input Slider 'PPC_Kp_Q'
      PPC_Kp_Q = CX(CXMAP(ICX+9))

! 160:[var] Variable Input Slider 'PPC_Ti_P'
      PPC_Ti_P = CX(CXMAP(ICX+10))

! 170:[var] Variable Input Slider 'PPC_Ti_V'
      PPC_Ti_V = CX(CXMAP(ICX+11))

! 180:[var] Variable Input Slider 'PPC_Ti_PF'
      PPC_Ti_PF = CX(CXMAP(ICX+12))

! 190:[var] Variable Input Slider 'PPC_Ti_Q'
      PPC_Ti_Q = CX(CXMAP(ICX+13))

! 210:[Simple_PPC]  
      CALL Simple_PPCDyn(RT_3, RT_4, RT_5, RT_6, RT_2, RT_1, Q_POC, P_PO&
     &C, Vrms_POC, NINT(DBlk), F_POI, 50, 2.5, PPC_Ti_P, PPC_Kp_P, 3, PP&
     &C_Ti_V, PPC_Ti_V, PPC_Ti_PF, PPC_Kp_PF, PPC_Ti_Q, PPC_Kp_Q, 1.15, &
     &0.0, 60.0, 1.0, 0.85, 0.0, 0.5, 0.8, 0.0, 0.6, -0.6)


! 220:[pgb] Output Channel 'Ppu'

      PGB(IPGB+2) = RT_1

! 230:[pgb] Output Channel 'Qpu'

      PGB(IPGB+3) = RT_2

! 240:[VSC]  
      CALL VSCDyn(RT_1, RT_2, NINT(DBlk), 50, 2.5, 999.0, 999.0, 1, 0.95&
     &, 0.0, 0.6, 33.0, 60.0, 0.85, 1.2, 8.0, 5.0, 0.5)


! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT2_EXE((IXFMR + 1),(IXFMR + 2),(IXFMR + 3), (IBRCH(1)+7), &
     &(IBRCH(1)+8), (IBRCH(1)+9), (IBRCH(1)+10), (IBRCH(1)+11), (IBRCH(1&
     &)+12),0,0,0,0,0,0,SS(1),0,1.0,0)

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 1) = RT_1
      STOF(ISTOF + 2) = RT_2
      STOF(ISTOF + 3) = RT_3
      STOF(ISTOF + 4) = RT_4
      STOF(ISTOF + 5) = RT_5
      STOF(ISTOF + 6) = RT_6
      STOF(ISTOF + 7) = Q_POC
      STOF(ISTOF + 8) = P_POC
      STOF(ISTOF + 9) = Vrms_POC
      STOF(ISTOF + 10) = RT_7
      STOF(ISTOF + 11) = PPC_Kp_Q
      STOF(ISTOF + 12) = PPC_Ti_Q
      STOF(ISTOF + 13) = PPC_Kp_PF
      STOF(ISTOF + 14) = PPC_Ti_PF
      STOF(ISTOF + 15) = PPC_Kp_V
      STOF(ISTOF + 16) = PPC_Ti_V
      STOF(ISTOF + 17) = PPC_Ti_P
      STOF(ISTOF + 18) = PPC_Kp_P
      STOF(ISTOF + 19) = RT_8
      STOF(ISTOF + 20) = RT_9
      STOF(ISTOF + 21) = RT_10
      STOF(ISTOF + 22) = F_POI
      STOF(ISTOF + 23) = DBlk
      STOF(ISTOF + 24) = RampUp_Pref
      STOF(ISTOF + 25) = RampDown_Pref

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 25 + IT_0) = Igrid_POC(IT_0)
         STOF(ISTOF + 28 + IT_0) = Vgrid_POC(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE IBROut()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

      REAL    EMTDC_VVDC    ! 
      REAL    P3PH3         ! 
      REAL    Q3PH3         ! 
!     SUBR    DGTL_RMS3     ! '3 Phase Digital RMS Meter'
      REAL    REALPOLE      ! Real Pole
!     SUBR    Simple_PPCOut  ! 
!     SUBR    VSCOut        ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices
      INTEGER  N(3), NT_2(3)

! Control Signals
      REAL     RT_3, RT_4, Q_POC, P_POC, Vrms_POC
      REAL     RT_8, RT_9, RT_10, F_POI
      REAL     Igrid_POC(3), Vgrid_POC(3)

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD3_1(3), RVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      IPGB      = NPGB
      NPGB      = NPGB + 4
      NCX       = NCX + 0
      INODE     = NNODE + 2
      NNODE     = NNODE + 11
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 15

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_3     = STOF(ISTOF + 3)
      RT_4     = STOF(ISTOF + 4)
      Q_POC    = STOF(ISTOF + 7)
      P_POC    = STOF(ISTOF + 8)
      Vrms_POC = STOF(ISTOF + 9)
      RT_8     = STOF(ISTOF + 19)
      RT_9     = STOF(ISTOF + 20)
      RT_10    = STOF(ISTOF + 21)
      F_POI    = STOF(ISTOF + 22)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         Igrid_POC(IT_0) = STOF(ISTOF + 25 + IT_0)
         Vgrid_POC(IT_0) = STOF(ISTOF + 28 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         N(IT_0) = NODE(INODE + 0 + IT_0)
         NT_2(IT_0) = NODE(INODE + 6 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'IBR.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 20:[freq-meas] Frequency/Incremental Phase/RMS Meter 
      RVD3_1(1) = VDC(N(1),SS(1))
      RVD3_1(2) = VDC(N(2),SS(1))
      RVD3_1(3) = VDC(N(3),SS(1))
      CALL E_FWAV1_EXE ( RVD3_1 ,  RT_9 , RT_10 , RT_8 )
      RT_9 = BY_2PI * RT_9
!

! 40:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      Igrid_POC(1) = ( CBR((IBRCH(1)+13), SS(1)))
      Igrid_POC(2) = ( CBR((IBRCH(1)+14), SS(1)))
      Igrid_POC(3) = ( CBR((IBRCH(1)+15), SS(1)))
      Vgrid_POC(1) = EMTDC_VVDC(SS(1), NT_2(1), 0)
      Vgrid_POC(2) = EMTDC_VVDC(SS(1), NT_2(2), 0)
      Vgrid_POC(3) = EMTDC_VVDC(SS(1), NT_2(3), 0)
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+13), (IBRCH(1)+14),&
     & (IBRCH(1)+15),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,180510896,RVD1_1,"Pd")
      P_POC = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+13), (IBRCH(1)+14),&
     & (IBRCH(1)+15),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,180510896,RVD1_1,"Qd")
      Q_POC = RVD1_1
      CALL DGTL_RMS3(256,SS(1),NT_2(1),NT_2(2),NT_2(3),RTCF(IVD1_1+3),1.&
     &0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,180510896,RVD1_1,"Vd")
      Vrms_POC = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,180510896,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,180510896,1,"hide2")
      ENDIF

! 90:[const] Real Constant 

      RT_4 = 0.0

! 100:[pgb] Output Channel 'Ppu'

      PGB(IPGB+1) = P_POC

! 110:[const] Real Constant 

      RT_3 = 1.0

! 200:[realpole] Real Pole 
!  Real_Pole
      F_POI = REALPOLE(0,1,0,1.0,0.01,RT_9,0.0,-1.0E20,1.0E20)

! 210:[Simple_PPC]  
      CALL Simple_PPCOut()


! 240:[VSC]  
      CALL VSCOut()


! 250:[pgb] Output Channel 'F_POI'

      PGB(IPGB+4) = F_POI

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 3) = RT_3
      STOF(ISTOF + 4) = RT_4
      STOF(ISTOF + 7) = Q_POC
      STOF(ISTOF + 8) = P_POC
      STOF(ISTOF + 9) = Vrms_POC
      STOF(ISTOF + 19) = RT_8
      STOF(ISTOF + 20) = RT_9
      STOF(ISTOF + 21) = RT_10
      STOF(ISTOF + 22) = F_POI

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 25 + IT_0) = Igrid_POC(IT_0)
         STOF(ISTOF + 28 + IT_0) = Vgrid_POC(IT_0)
      END DO


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE IBRDyn_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    Simple_PPCDyn_Begin  ! 
!     SUBR    VSCDyn_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      REAL     RT_3, RT_4

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ICX                                 ! Control/Monitoring
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ICX       = NCX
      NCX       = NCX + 13
      INODE     = NNODE + 2
      NNODE     = NNODE + 11
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 15

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[var_switch] Two State Switch 'Deblock'

! 30:[var] Variable Input Slider 'RampUp_Pref'

! 50:[var] Variable Input Slider 'Vref'

! 60:[var] Variable Input Slider 'RampDown_Pref'

! 70:[var] Variable Input Slider 'Pref'

! 80:[ratelimit] Rate Limiter 

! 90:[const] Real Constant 
      RT_4 = 0.0

! 110:[const] Real Constant 
      RT_3 = 1.0

! 120:[var] Variable Input Slider 'PPC_Kp_P'

! 130:[var] Variable Input Slider 'PPC_Kp_V'

! 140:[var] Variable Input Slider 'PPC_Kp_PF'

! 150:[var] Variable Input Slider 'PPC_Kp_Q'

! 160:[var] Variable Input Slider 'PPC_Ti_P'

! 170:[var] Variable Input Slider 'PPC_Ti_V'

! 180:[var] Variable Input Slider 'PPC_Ti_PF'

! 190:[var] Variable Input Slider 'PPC_Ti_Q'

! 210:[Simple_PPC]  
      CALL Simple_PPCDyn_Begin(50, 2.5, 3, 1.15, 0.0, 60.0, 1.0, 0.85, 0&
     &.0, 0.5, 0.8, 0.0, 0.6, -0.6)


! 220:[pgb] Output Channel 'Ppu'

! 230:[pgb] Output Channel 'Qpu'

! 240:[VSC]  
      CALL VSCDyn_Begin(50, 2.5, 999.0, 999.0, 1, 33.0, 60.0, 0.85, 1.2,&
     & 8.0, 5.0, 0.5)


! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
      CALL COMPONENT_ID(ICALL_NO,831911022)
      RVD1_1 = ONE_3RD*130.0
      RVD1_2 = 33.0*SQRT_1BY3
      RVD1_3 = 230.0*SQRT_1BY3
      CALL E_TF2W_CFG((IXFMR + 1),0,RVD1_1,60.0,0.09,0.0,RVD1_2,RVD1_3,2&
     &.0)
      CALL E_TF2W_CFG((IXFMR + 2),0,RVD1_1,60.0,0.09,0.0,RVD1_2,RVD1_3,2&
     &.0)
      CALL E_TF2W_CFG((IXFMR + 3),0,RVD1_1,60.0,0.09,0.0,RVD1_2,RVD1_3,2&
     &.0)
      IF (0.0 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.0
        RVD1_4 = 6.0/(130.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH(1)+1),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+2),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+3),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+4),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+5),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+6),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT2_CFG(2, (IBRCH(1)+7), (IBRCH(1)+8), (IBRCH(1)+9), (IBRCH&
     &(1)+10), (IBRCH(1)+11), (IBRCH(1)+12),0,0,0,0,0,0,SS(1),RVD1_1,0.2&
     &,1.17,60.0,0.0,2.0,0.0,0.09,0.0,0.0,0.0,0.0,0.0,RVD1_2,RVD1_3,0.0,&
     &0.0)

      RETURN
      END

!=======================================================================

      SUBROUTINE IBROut_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    Simple_PPCOut_Begin  ! 
!     SUBR    VSCOut_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  NT_2(3)

! Control Signals
      REAL     RT_3, RT_4

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NCX       = NCX + 0
      INODE     = NNODE + 2
      NNODE     = NNODE + 11
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 15

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_2(IT_0) = NODE(INODE + 6 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 20:[freq-meas] Frequency/Incremental Phase/RMS Meter 
      CALL COMPONENT_ID(ICALL_NO,1103814923)
      CALL E_FWAV1_CFG(33.0 , 60.0 , 0.02)

! 40:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(230.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(230.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0

! 90:[const] Real Constant 
      RT_4 = 0.0

! 100:[pgb] Output Channel 'Ppu'

! 110:[const] Real Constant 
      RT_3 = 1.0

! 200:[realpole] Real Pole 

! 210:[Simple_PPC]  
      CALL Simple_PPCOut_Begin(50, 2.5, 3, 1.15, 0.0, 60.0, 1.0, 0.85, 0&
     &.0, 0.5, 0.8, 0.0, 0.6, -0.6)


! 240:[VSC]  
      CALL VSCOut_Begin(50, 2.5, 999.0, 999.0, 1, 33.0, 60.0, 0.85, 1.2,&
     & 8.0, 5.0, 0.5)


! 250:[pgb] Output Channel 'F_POI'

      RETURN
      END

