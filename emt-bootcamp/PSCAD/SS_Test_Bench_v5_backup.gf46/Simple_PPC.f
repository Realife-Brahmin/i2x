!=======================================================================
! Generated by: PSCAD v5.0.2.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Simple_PPC
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE Simple_PPCDyn(PFref, Qref, Pref, Vref, Qpu, Ppu,       &
     &   Qmeas, Pmeas, Vmeas, DBLK, Freq_POI, Scale, Sbase, Ti_P, Kp_P, &
     &   con_mode, Ti_V, Kp_V, Ti_PF, Kp_PF, Ti_Q, Kp_Q, HVRT, FDroop,  &
     &   Fbase, Fdb, LVRT, VRT_On_Delay, VRT_Off_Delay, Pmax, Pmin,     &
     &   Qmax, Qmin)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

      REAL    REALPOLE      ! Real Pole
!     SUBR    EMTDC_X2COMP  ! 'Comparator with Interpolation'
!     SUBR    EMTDC_XONDLAY  ! 'Delay Function with Interpolation'
!     SUBR    EMTDC_XTTRANS  ! 'Timed Transition'
!     SUBR    PI_AntiWindUp_PPCDyn  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: DBLK, Scale
      INTEGER, INTENT(IN)  :: con_mode
      REAL,    INTENT(IN)  :: PFref, Qref, Pref
      REAL,    INTENT(IN)  :: Vref, Qmeas, Pmeas
      REAL,    INTENT(IN)  :: Vmeas, Freq_POI
      REAL,    INTENT(IN)  :: Sbase, Ti_P, Kp_P
      REAL,    INTENT(IN)  :: Ti_V, Kp_V, Ti_PF
      REAL,    INTENT(IN)  :: Kp_PF, Ti_Q, Kp_Q
      REAL,    INTENT(IN)  :: HVRT, FDroop, Fbase
      REAL,    INTENT(IN)  :: Fdb, LVRT
      REAL,    INTENT(IN)  :: VRT_On_Delay
      REAL,    INTENT(IN)  :: VRT_Off_Delay, Pmax
      REAL,    INTENT(IN)  :: Pmin, Qmax, Qmin
      REAL,    INTENT(OUT) :: Qpu
      REAL,    INTENT(OUT) :: Ppu! Aliases: Ppu_ref

! Electrical Node Indices

! Control Signals
      INTEGER  RST, IT_1, IT_2, IT_3, IT_4, IT_5
      INTEGER  VRT
      REAL     RT_1, RT_2, RT_3, RT_4, RT_5, RT_6
      REAL     Srate, RT_7, RT_8(3), inv_Srate
      REAL     RT_9, RT_10, Q_over_P, RT_11
      REAL     RT_12, Vpu_ref, Qpu_meas, RT_13
      REAL     Ppu_meas, Qpu_ref, Vpu_meas, RT_14
      REAL     RT_15, RT_16, RT_17, RT_18, RT_19

! Internal Variables
      LOGICAL  LVD1_1
      REAL     RVD2_1(2), RVD2_2(2)

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 10
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 59
      IPGB      = NPGB
      NPGB      = NPGB + 3
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      Qpu      = STOF(ISTOF + 5)
      Ppu      = STOF(ISTOF + 6)
      RT_1     = STOF(ISTOF + 31)
      RT_2     = STOF(ISTOF + 32)
      RT_3     = STOF(ISTOF + 33)
      RT_4     = STOF(ISTOF + 34)
      RST      = STOI(ISTOI + 4)
      RT_5     = STOF(ISTOF + 35)
      RT_6     = STOF(ISTOF + 36)
      Srate    = STOF(ISTOF + 37)
      RT_7     = STOF(ISTOF + 38)
      inv_Srate = STOF(ISTOF + 42)
      RT_9     = STOF(ISTOF + 43)
      RT_10    = STOF(ISTOF + 44)
      Q_over_P = STOF(ISTOF + 45)
      IT_1     = STOI(ISTOI + 5)
      RT_11    = STOF(ISTOF + 46)
      RT_12    = STOF(ISTOF + 47)
      Vpu_ref  = STOF(ISTOF + 48)
      Qpu_meas = STOF(ISTOF + 49)
      RT_13    = STOF(ISTOF + 50)
      Ppu_meas = STOF(ISTOF + 51)
      Qpu_ref  = STOF(ISTOF + 52)
      Vpu_meas = STOF(ISTOF + 53)
      IT_2     = STOI(ISTOI + 6)
      IT_3     = STOI(ISTOI + 7)
      IT_4     = STOI(ISTOI + 8)
      IT_5     = STOI(ISTOI + 9)
      VRT      = STOI(ISTOI + 10)
      RT_14    = STOF(ISTOF + 54)
      RT_15    = STOF(ISTOF + 55)
      RT_16    = STOF(ISTOF + 56)
      RT_17    = STOF(ISTOF + 57)
      RT_18    = STOF(ISTOF + 58)
      RT_19    = STOF(ISTOF + 59)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         RT_8(IT_0) = STOF(ISTOF + 38 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Simple_PPC.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 30:[const] Real Constant 
      RT_9 = 1.0

! 130:[const] Real Constant 
      RT_7 = 0.0

! 170:[const] Real Constant 
      RT_16 = 60.0

! 190:[inv] Interpolated Logic Inverter 
      IF (DBLK .NE. 0) THEN
         RST = 0
      ELSE
         RST = 1
      ENDIF

! 240:[realpole] Real Pole 
!  Real_Pole
      RT_17 = REALPOLE(0,1,0,1.0,0.05,Freq_POI,0.0,-1.0E20,1.0E20)

! 260:[pgb] Output Channel 'F_POI'

      PGB(IPGB+1) = RT_17

! 310:[unity] Type/Shape conversion block 
! real -> real
      Vpu_ref = Vref

! 330:[unity] Type/Shape conversion block 
! real -> real
      Vpu_meas = Vmeas

! 390:[abs] Absolute Value 
      RT_10 = ABS(PFref)

! 400:[trig] Trigonometric Functions 
!  Trig-Func
      RT_12 = ACOS(RT_10)
!

! 410:[trig] Trigonometric Functions 
!  Trig-Func
      RT_11 = TAN(RT_12)
!

! 430:[compare] Single Input Level Comparator 
!
!
      CALL EMTDC_X2COMP(0,0,HVRT,Vpu_meas,0.0,0.0,1.0,RVD2_1)
      IT_2 = NINT(RVD2_1(1))

! 440:[compare] Single Input Level Comparator 
!
!
      CALL EMTDC_X2COMP(0,0,LVRT,Vpu_meas,1.0,0.0,0.0,RVD2_1)
      IT_3 = NINT(RVD2_1(1))

! 450:[mult] Multiplier 
      Srate = Sbase * REAL(Scale)

! 460:[sumjct] Summing/Differencing Junctions 
      RT_14 = + RT_16 - RT_17

! 470:[deadband] Deadband with offset and gain 
      RT_15 = 0.0
      IF (RT_14 .GT. RTCF(NRTCF)) THEN
        RT_15 = RTCF(NRTCF+1)*(RT_14 - RTCF(NRTCF)) +  RTCF(NRTCF+2)
      ELSEIF (RT_14 .LT. -RTCF(NRTCF)) THEN
        RT_15 = RTCF(NRTCF+1)*(RT_14 + RTCF(NRTCF)) -  RTCF(NRTCF+2)
      ENDIF
      NRTCF = NRTCF + 3

! 480:[div] Divider 
      IF (ABS(Fbase) .LT. 1.0E-100) THEN
         IF (Fbase .LT. 0.0)  THEN
            RT_19 = -1.0E100 * RT_15
         ELSE
            RT_19 =  1.0E100 * RT_15
         ENDIF
      ELSE
         RT_19 = RT_15 / Fbase
      ENDIF

! 490:[sumjct] Summing/Differencing Junctions 
      RT_1 = - Vpu_meas + Vpu_ref

! 500:[sign] Sign Function 
!  Sign Function
      IF (PFref .GT. 0.0) THEN
        IT_1 = 1
      ELSEIF (PFref .LT. 0.0) THEN
        IT_1 = -1
      ELSE
        IT_1 = 0
      ENDIF

! 510:[mult] Multiplier 
      Q_over_P = REAL(IT_1) * RT_11

! 520:[logic_mult] Multiple Input Logic Gate 
!
! Multi input OR gate
!
      IF ( (IT_2 .NE. 0) .OR. (IT_3 .NE. 0) ) THEN
        IT_4 = 1
      ELSE
        IT_4 = 0
      ENDIF

! 530:[delay] Binary ON Delay with Interpolation 
!
      RVD2_1(1) = FLOAT(IT_4)
      RVD2_1(2) = 0.0
      CALL EMTDC_XONDLAY(0,VRT_On_Delay,RVD2_1,RVD2_2)
      IT_5 = NINT(RVD2_2(1))

! 540:[bin_delay] Timed ON/OFF Logic Transition 
!
      RVD2_1(1) = REAL(IT_5)
      RVD2_1(2) = 0.0
!
      CALL EMTDC_XTTRANS(0,0.0,VRT_Off_Delay,RVD2_1,RVD2_2)
!
      VRT = NINT(RVD2_2(1))

! 550:[div] Divider 
      IF (ABS(Srate) .LT. 1.0E-100) THEN
         IF (Srate .LT. 0.0)  THEN
            inv_Srate = -1.0E100 * RT_9
         ELSE
            inv_Srate =  1.0E100 * RT_9
         ENDIF
      ELSE
         inv_Srate = RT_9 / Srate
      ENDIF

! 560:[PI_AntiWindUp_PPC]  
      CALL PI_AntiWindUp_PPCDyn(RT_1, RT_2, VRT, RST, Kp_V, Ti_V, 1.0, Q&
     &max, Qmin)


! 570:[gain] Gain Block 
!  Per-Unitize Active Power
      Ppu = inv_Srate * Pref

! 580:[gain] Gain Block 
!  Per-Unitize Active Power
      Ppu_meas = inv_Srate * Pmeas

! 590:[gain] Gain Block 
!  Per-Unitize Reactive Power
      Qpu_ref = inv_Srate * Qref

! 600:[gain] Gain Block 
!  Per-Unitize Reactive Power
      Qpu_meas = inv_Srate * Qmeas

! 610:[gain] Gain Block 
!  
      RT_13 = Q_over_P * Ppu_meas

! 620:[sumjct] Summing/Differencing Junctions 
      RT_3 = - Qpu_meas + RT_13

! 630:[PI_AntiWindUp_PPC]  
      CALL PI_AntiWindUp_PPCDyn(RT_3, RT_4, VRT, RST, Kp_PF, Ti_PF, 1.0,&
     & Qmax, Qmin)


! 640:[datamerge] Merges data signals into an array 
      RT_8(1) = RT_2
      RT_8(2) = RT_4
      RT_8(3) = Qpu_ref

! 650:[sumjct] Summing/Differencing Junctions 
      RT_5 = - Ppu_meas + Ppu + RT_7

! 660:[dynamic_datatap] Dynamic datatap 
      LVD1_1 = STORL(NSTORL)
      Qpu = 0.0
      IF ((con_mode .GT. 0).AND.(con_mode .LE. 3)) THEN
        Qpu = RT_8(con_mode)
      ELSE
        IF (.NOT. LVD1_1) THEN   ! warn only once
          CALL EMTDC_MESSAGE(ICALL_NO,1556742930,1,1,"Dynamic datatap tr&
     &ying to access elements outside bounds")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1

! 670:[PI_AntiWindUp_PPC]  
      CALL PI_AntiWindUp_PPCDyn(RT_5, RT_6, VRT, RST, Kp_P, Ti_P, 1.0, P&
     &max, Pmin)


! 680:[pgb] Output Channel 'Qpu'

      PGB(IPGB+2) = Qpu

! 700:[div] Divider 
      IF (ABS(FDroop) .LT. 1.0E-100) THEN
         IF (FDroop .LT. 0.0)  THEN
            RT_18 = -1.0E100 * RT_19
         ELSE
            RT_18 =  1.0E100 * RT_19
         ENDIF
      ELSE
         RT_18 = RT_19 / FDroop
      ENDIF

! 720:[pgb] Output Channel 'Ppu'

      PGB(IPGB+3) = RT_6

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 1) = PFref
      STOF(ISTOF + 2) = Qref
      STOF(ISTOF + 3) = Pref
      STOF(ISTOF + 4) = Vref
      STOF(ISTOF + 5) = Qpu
      STOF(ISTOF + 6) = Ppu
      STOF(ISTOF + 7) = Qmeas
      STOF(ISTOF + 8) = Pmeas
      STOF(ISTOF + 9) = Vmeas
      STOI(ISTOI + 1) = DBLK
      STOF(ISTOF + 10) = Freq_POI
      STOI(ISTOI + 2) = Scale
      STOF(ISTOF + 11) = Sbase
      STOF(ISTOF + 12) = Ti_P
      STOF(ISTOF + 13) = Kp_P
      STOI(ISTOI + 3) = con_mode
      STOF(ISTOF + 14) = Ti_V
      STOF(ISTOF + 15) = Kp_V
      STOF(ISTOF + 16) = Ti_PF
      STOF(ISTOF + 17) = Kp_PF
      STOF(ISTOF + 18) = Ti_Q
      STOF(ISTOF + 19) = Kp_Q
      STOF(ISTOF + 20) = HVRT
      STOF(ISTOF + 21) = FDroop
      STOF(ISTOF + 22) = Fbase
      STOF(ISTOF + 23) = Fdb
      STOF(ISTOF + 24) = LVRT
      STOF(ISTOF + 25) = VRT_On_Delay
      STOF(ISTOF + 26) = VRT_Off_Delay
      STOF(ISTOF + 27) = Pmax
      STOF(ISTOF + 28) = Pmin
      STOF(ISTOF + 29) = Qmax
      STOF(ISTOF + 30) = Qmin
      STOF(ISTOF + 31) = RT_1
      STOF(ISTOF + 32) = RT_2
      STOF(ISTOF + 33) = RT_3
      STOF(ISTOF + 34) = RT_4
      STOI(ISTOI + 4) = RST
      STOF(ISTOF + 35) = RT_5
      STOF(ISTOF + 36) = RT_6
      STOF(ISTOF + 37) = Srate
      STOF(ISTOF + 38) = RT_7
      STOF(ISTOF + 42) = inv_Srate
      STOF(ISTOF + 43) = RT_9
      STOF(ISTOF + 44) = RT_10
      STOF(ISTOF + 45) = Q_over_P
      STOI(ISTOI + 5) = IT_1
      STOF(ISTOF + 46) = RT_11
      STOF(ISTOF + 47) = RT_12
      STOF(ISTOF + 48) = Vpu_ref
      STOF(ISTOF + 49) = Qpu_meas
      STOF(ISTOF + 50) = RT_13
      STOF(ISTOF + 51) = Ppu_meas
      STOF(ISTOF + 52) = Qpu_ref
      STOF(ISTOF + 53) = Vpu_meas
      STOI(ISTOI + 6) = IT_2
      STOI(ISTOI + 7) = IT_3
      STOI(ISTOI + 8) = IT_4
      STOI(ISTOI + 9) = IT_5
      STOI(ISTOI + 10) = VRT
      STOF(ISTOF + 54) = RT_14
      STOF(ISTOF + 55) = RT_15
      STOF(ISTOF + 56) = RT_16
      STOF(ISTOF + 57) = RT_17
      STOF(ISTOF + 58) = RT_18
      STOF(ISTOF + 59) = RT_19

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 38 + IT_0) = RT_8(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------
      !Qpu      is output
      !Ppu      is output

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE Simple_PPCOut()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    PI_AntiWindUp_PPCOut  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices

! Control Signals
      REAL     RT_7, RT_9, RT_16

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC          ! Storage Indices
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NPGB      = NPGB + 3
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_7     = STOF(ISTOF + 38)
      RT_9     = STOF(ISTOF + 43)
      RT_16    = STOF(ISTOF + 56)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Simple_PPC.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 30:[const] Real Constant 

      RT_9 = 1.0

! 130:[const] Real Constant 

      RT_7 = 0.0

! 170:[const] Real Constant 

      RT_16 = 60.0

! 560:[PI_AntiWindUp_PPC]  
      CALL PI_AntiWindUp_PPCOut()


! 630:[PI_AntiWindUp_PPC]  
      CALL PI_AntiWindUp_PPCOut()


! 670:[PI_AntiWindUp_PPC]  
      CALL PI_AntiWindUp_PPCOut()


!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 38) = RT_7
      STOF(ISTOF + 43) = RT_9
      STOF(ISTOF + 56) = RT_16


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE Simple_PPCDyn_Begin(Scale, Sbase, con_mode, HVRT,      &
     &   FDroop, Fbase, Fdb, LVRT, VRT_On_Delay, VRT_Off_Delay, Pmax,   &
     &   Pmin, Qmax, Qmin)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    PI_AntiWindUp_PPCDyn_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: Scale, con_mode
      REAL,    INTENT(IN)  :: Sbase, HVRT, FDroop
      REAL,    INTENT(IN)  :: Fbase, Fdb, LVRT
      REAL,    INTENT(IN)  :: VRT_On_Delay
      REAL,    INTENT(IN)  :: VRT_Off_Delay, Pmax
      REAL,    INTENT(IN)  :: Pmin, Qmax, Qmin

! Electrical Node Indices

! Control Signals
      REAL     RT_7, RT_9, RT_16

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 30:[const] Real Constant 
      RT_9 = 1.0

! 130:[const] Real Constant 
      RT_7 = 0.0

! 170:[const] Real Constant 
      RT_16 = 60.0

! 190:[inv] Interpolated Logic Inverter 

! 240:[realpole] Real Pole 

! 260:[pgb] Output Channel 'F_POI'

! 310:[unity] Type/Shape conversion block 

! 330:[unity] Type/Shape conversion block 

! 390:[abs] Absolute Value 

! 400:[trig] Trigonometric Functions 

! 410:[trig] Trigonometric Functions 

! 430:[compare] Single Input Level Comparator 

! 440:[compare] Single Input Level Comparator 

! 450:[mult] Multiplier 

! 460:[sumjct] Summing/Differencing Junctions 

! 470:[deadband] Deadband with offset and gain 
      RTCF(NRTCF)   = 0.5*ABS(Fdb)
      RTCF(NRTCF+1) = ABS(1.0)
      RTCF(NRTCF+2) = ABS(0.0)
      NRTCF = NRTCF + 3

! 480:[div] Divider 

! 490:[sumjct] Summing/Differencing Junctions 

! 500:[sign] Sign Function 

! 510:[mult] Multiplier 

! 530:[delay] Binary ON Delay with Interpolation 

! 540:[bin_delay] Timed ON/OFF Logic Transition 

! 550:[div] Divider 

! 560:[PI_AntiWindUp_PPC]  
      CALL PI_AntiWindUp_PPCDyn_Begin()


! 570:[gain] Gain Block 

! 580:[gain] Gain Block 

! 590:[gain] Gain Block 

! 600:[gain] Gain Block 

! 610:[gain] Gain Block 

! 620:[sumjct] Summing/Differencing Junctions 

! 630:[PI_AntiWindUp_PPC]  
      CALL PI_AntiWindUp_PPCDyn_Begin()


! 640:[datamerge] Merges data signals into an array 

! 650:[sumjct] Summing/Differencing Junctions 

! 660:[dynamic_datatap] Dynamic datatap 

! 670:[PI_AntiWindUp_PPC]  
      CALL PI_AntiWindUp_PPCDyn_Begin()


! 680:[pgb] Output Channel 'Qpu'

! 700:[div] Divider 

! 720:[pgb] Output Channel 'Ppu'

      RETURN
      END

!=======================================================================

      SUBROUTINE Simple_PPCOut_Begin(Scale, Sbase, con_mode, HVRT,      &
     &   FDroop, Fbase, Fdb, LVRT, VRT_On_Delay, VRT_Off_Delay, Pmax,   &
     &   Pmin, Qmax, Qmin)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    PI_AntiWindUp_PPCOut_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: Scale, con_mode
      REAL,    INTENT(IN)  :: Sbase, HVRT, FDroop
      REAL,    INTENT(IN)  :: Fbase, Fdb, LVRT
      REAL,    INTENT(IN)  :: VRT_On_Delay
      REAL,    INTENT(IN)  :: VRT_Off_Delay, Pmax
      REAL,    INTENT(IN)  :: Pmin, Qmax, Qmin

! Electrical Node Indices

! Control Signals
      REAL     RT_7, RT_9, RT_16

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 30:[const] Real Constant 
      RT_9 = 1.0

! 130:[const] Real Constant 
      RT_7 = 0.0

! 170:[const] Real Constant 
      RT_16 = 60.0

! 560:[PI_AntiWindUp_PPC]  
      CALL PI_AntiWindUp_PPCOut_Begin()


! 630:[PI_AntiWindUp_PPC]  
      CALL PI_AntiWindUp_PPCOut_Begin()


! 670:[PI_AntiWindUp_PPC]  
      CALL PI_AntiWindUp_PPCOut_Begin()


      RETURN
      END

