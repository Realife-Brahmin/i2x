!=======================================================================
! Generated by: PSCAD v5.0.2.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Main
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE MainDyn()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    EMTDC_X2COMP  ! 'Comparator with Interpolation'
!     SUBR    Gen1Dyn       ! 
!     SUBR    IBRDyn        ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      INTEGER  ENAB, IT_1, BRK_IBRLine_1, IT_2
      INTEGER  BRK_Line_1
      REAL     VLoad_rms, ILoad_rms
      REAL     VLoad_inst(3), ILoad_inst(3)
      REAL     PLoad, QLoad, VBus_1, PLine1
      REAL     QLine1, RT_1, Rload, Lload, VBus_2
      REAL     PLine2, QLine2, VIBR_1, PIBR_1
      REAL     QIBR_1, Gen2_BRK, Iflt_IBR_1(3)
      REAL     Tfault_Tline1, Tclear_Tline1
      REAL     Ttrip_Tline1, Tfault_IBR1
      REAL     Ttrip_IBR1, Tclear_IBR1, Delay_IBR
      REAL     IIBR_1, PIBR1, QIBR1, VIBR1, PIBR2
      REAL     QIBR2, VIBR2, Iflt_Line1(3), PGen1
      REAL     QGen1, VGen1, PGen2, QGen2, VGen2

! Internal Variables
      LOGICAL  LVD1_1
      INTEGER  IVD1_1, IVD1_2, IVD1_3, IVD1_4
      REAL     RVD2_1(2)

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER ICX, IPGB, ITXRX                    ! Control/Monitoring
      INTEGER ISUBS, SS(5), IBRCH(5), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 5
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 49
      IPGB      = NPGB
      NPGB      = NPGB + 24
      ITXRX     = NTXRX
      NTXRX     = NTXRX + 1
      ICX       = NCX
      NCX       = NCX + 6
      INODE     = NNODE + 2
      NNODE     = NNODE + 68
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 6
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 5

      DO IT_0 = 1,5
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 42


      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 21


      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 6


      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 9


      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 9

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      VLoad_rms = STOF(ISTOF + 1)
      ILoad_rms = STOF(ISTOF + 2)
      PLoad    = STOF(ISTOF + 9)
      QLoad    = STOF(ISTOF + 10)
      VBus_1   = STOF(ISTOF + 11)
      PLine1   = STOF(ISTOF + 12)
      QLine1   = STOF(ISTOF + 13)
      RT_1     = STOF(ISTOF + 14)
      ENAB     = STOI(ISTOI + 1)
      Rload    = STOF(ISTOF + 15)
      Lload    = STOF(ISTOF + 16)
      VBus_2   = STOF(ISTOF + 17)
      PLine2   = STOF(ISTOF + 18)
      QLine2   = STOF(ISTOF + 19)
      VIBR_1   = STOF(ISTOF + 20)
      PIBR_1   = STOF(ISTOF + 21)
      QIBR_1   = STOF(ISTOF + 22)
      Gen2_BRK = STOF(ISTOF + 23)
      IT_1     = STOI(ISTOI + 2)
      BRK_IBRLine_1 = STOI(ISTOI + 3)
      IT_2     = STOI(ISTOI + 4)
      BRK_Line_1 = STOI(ISTOI + 5)
      Tfault_Tline1 = STOF(ISTOF + 27)
      Tclear_Tline1 = STOF(ISTOF + 28)
      Ttrip_Tline1 = STOF(ISTOF + 29)
      Tfault_IBR1 = STOF(ISTOF + 30)
      Ttrip_IBR1 = STOF(ISTOF + 31)
      Tclear_IBR1 = STOF(ISTOF + 32)
      Delay_IBR = STOF(ISTOF + 33)
      IIBR_1   = STOF(ISTOF + 34)
      PIBR1    = STOF(ISTOF + 35)
      QIBR1    = STOF(ISTOF + 36)
      VIBR1    = STOF(ISTOF + 37)
      PIBR2    = STOF(ISTOF + 38)
      QIBR2    = STOF(ISTOF + 39)
      VIBR2    = STOF(ISTOF + 40)
      PGen1    = STOF(ISTOF + 44)
      QGen1    = STOF(ISTOF + 45)
      VGen1    = STOF(ISTOF + 46)
      PGen2    = STOF(ISTOF + 47)
      QGen2    = STOF(ISTOF + 48)
      VGen2    = STOF(ISTOF + 49)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         VLoad_inst(IT_0) = STOF(ISTOF + 2 + IT_0)
         ILoad_inst(IT_0) = STOF(ISTOF + 5 + IT_0)
         Iflt_IBR_1(IT_0) = STOF(ISTOF + 23 + IT_0)
         Iflt_Line1(IT_0) = STOF(ISTOF + 40 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[time-sig] Output of Simulation Time 
      RT_1 = TIME

! 20:[compare] Single Input Level Comparator 
!
!
      CALL EMTDC_X2COMP(0,0,2.0,RT_1,0.0,0.0,1.0,RVD2_1)
      ENAB = NINT(RVD2_1(1))

! 30:[radiolink] Wireless connection 'ENAB'
      TX(TXRX(ITXRX+1)) = REAL(ENAB)

! 40:[Gen1]  
      CALL Gen1Dyn()


! 50:[Gen1]  
      CALL Gen1Dyn()


! 60:[var_switch] Two State Switch 'Gen2_switch'
      Gen2_BRK = CX(CXMAP(ICX+1))

! 70:[breaker3] 3 Phase Breaker 'Gen2_BRK'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+31),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-Gen2_BRK))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+32),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-Gen2_BRK))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+33),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-Gen2_BRK))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+31),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+32),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+33),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,43999935,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,43999935,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,43999935,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+31),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+32),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+33),SS(1)))

! 90:[var] Variable Input Slider 'TfaultSlider_Tline1'
      Tfault_Tline1 = CX(CXMAP(ICX+2))

! 130:[var] Variable Input Slider 'TfaultSlider_IBR1'
      Tfault_IBR1 = CX(CXMAP(ICX+3))

! 170:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_2 = 0
      IF ( TIME .GE. Tfault_Tline1 ) IT_2 = 1
      IF ( TIME .GE. (Tfault_Tline1+0.3) ) IT_2 = 0

! 200:[var] Variable Input Slider 'Tclear_IBR1'
      Tclear_IBR1 = CX(CXMAP(ICX+4))

! 250:[fixed_load] Fixed Load 
      CALL COMPONENT_ID(ICALL_NO,355718081)
      CALL LOAD3P2_EXE(SS(2), (IBRCH(2)+1), (IBRCH(2)+2), (IBRCH(2)+3), &
     &(IBRCH(2)+4), (IBRCH(2)+5), (IBRCH(2)+6),1.0)
      Rload = RTCF(NRTCF-24)
      Lload = RTCF(NRTCF-23)

! 280:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_1 = 0
      IF ( TIME .GE. Tfault_IBR1 ) IT_1 = 1
      IF ( TIME .GE. (Tfault_IBR1+0.3) ) IT_1 = 0

! 300:[var] Variable Input Slider 'Tclear_Tline1'
      Tclear_Tline1 = CX(CXMAP(ICX+5))

! 320:[IBR]  
      CALL IBRDyn()


! 330:[var] Variable Input Slider 'Sld_Delay_IBR'
      Delay_IBR = CX(CXMAP(ICX+6))

! 340:[sumjct] Summing/Differencing Junctions 
      Ttrip_IBR1 = + Tfault_IBR1 + Tclear_IBR1

! 350:[sumjct] Summing/Differencing Junctions 
      Ttrip_Tline1 = + Tfault_Tline1 + Tclear_Tline1

! 360:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRK_IBRLine_1 = 0
      ELSE
         BRK_IBRLine_1 = 0
         IF ( TIME .GE. Ttrip_IBR1 ) BRK_IBRLine_1 = (1-0)
      ENDIF

! 370:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRK_Line_1 = 0
      ELSE
         BRK_Line_1 = 0
         IF ( TIME .GE. Ttrip_Tline1 ) BRK_Line_1 = (1-0)
      ENDIF

! 380:[breaker3] 3 Phase Breaker 'BRK_IBRLine_1'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(3), (IBRCH(3)+4),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK_IBRLine_1)))
      CALL EMTDC_BREAKER1(SS(3), (IBRCH(3)+5),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK_IBRLine_1)))
      CALL EMTDC_BREAKER1(SS(3), (IBRCH(3)+6),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK_IBRLine_1)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(3)+4),SS(3)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(3)+5),SS(3)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(3)+6),SS(3)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1590690971,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1590690971,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1590690971,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(3)+4),SS(3)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(3)+5),SS(3)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(3)+6),SS(3)))

! 390:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(4), (IBRCH(4)+1), (IBRCH(4)+2), (IBRCH(4)+3),&
     & (IBRCH(4)+4), (IBRCH(4)+5), (IBRCH(4)+6),0,IT_1,7,0.01)
      LVD1_1 = (OPENBR( (IBRCH(4)+1),SS(4)).AND.OPENBR( (IBRCH(4)+2),SS(&
     &4)).AND.OPENBR( (IBRCH(4)+3),SS(4)).AND.OPENBR( (IBRCH(4)+4),SS(4)&
     &).AND.OPENBR( (IBRCH(4)+5),SS(4)).AND.OPENBR( (IBRCH(4)+6),SS(4)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,1824786496,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 430:[breaker3] 3 Phase Breaker 'BRK_IBRLine_1'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(2), (IBRCH(2)+16),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_IBRLine_1)))
      CALL EMTDC_BREAKER1(SS(2), (IBRCH(2)+17),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_IBRLine_1)))
      CALL EMTDC_BREAKER1(SS(2), (IBRCH(2)+18),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_IBRLine_1)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(2)+16),SS(2)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(2)+17),SS(2)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(2)+18),SS(2)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1630473859,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1630473859,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1630473859,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(2)+16),SS(2)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(2)+17),SS(2)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(2)+18),SS(2)))

! 440:[breaker3] 3 Phase Breaker 'BRK_Line_1'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(2), (IBRCH(2)+19),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_Line_1)))
      CALL EMTDC_BREAKER1(SS(2), (IBRCH(2)+20),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_Line_1)))
      CALL EMTDC_BREAKER1(SS(2), (IBRCH(2)+21),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_Line_1)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(2)+19),SS(2)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(2)+20),SS(2)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(2)+21),SS(2)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,823589780,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,823589780,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,823589780,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(2)+19),SS(2)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(2)+20),SS(2)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(2)+21),SS(2)))

! 450:[pgb] Output Channel 'Lload'

      PGB(IPGB+13) = Lload

! 460:[pgb] Output Channel 'Rload'

      PGB(IPGB+14) = Rload

! 470:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(5), (IBRCH(5)+1), (IBRCH(5)+2), (IBRCH(5)+3),&
     & (IBRCH(5)+4), (IBRCH(5)+5), (IBRCH(5)+6),0,IT_2,7,0.01)
      LVD1_1 = (OPENBR( (IBRCH(5)+1),SS(5)).AND.OPENBR( (IBRCH(5)+2),SS(&
     &5)).AND.OPENBR( (IBRCH(5)+3),SS(5)).AND.OPENBR( (IBRCH(5)+4),SS(5)&
     &).AND.OPENBR( (IBRCH(5)+5),SS(5)).AND.OPENBR( (IBRCH(5)+6),SS(5)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,1206953053,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 490:[breaker3] 3 Phase Breaker 'BRK_Line_1'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+34),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_Line_1)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+35),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_Line_1)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+36),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_Line_1)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+34),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+35),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+36),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2028368394,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2028368394,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2028368394,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+34),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+35),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+36),SS(1)))

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT2_EXE((IXFMR + 1),(IXFMR + 2),(IXFMR + 3), (IBRCH(1)+7), &
     &(IBRCH(1)+8), (IBRCH(1)+9), (IBRCH(1)+10), (IBRCH(1)+11), (IBRCH(1&
     &)+12),0,0,0,0,0,0,SS(1),0,1.0,0)

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT2_EXE((IXFMR + 4),(IXFMR + 5),(IXFMR + 6), (IBRCH(1)+22),&
     & (IBRCH(1)+23), (IBRCH(1)+24), (IBRCH(1)+25), (IBRCH(1)+26), (IBRC&
     &H(1)+27),0,0,0,0,0,0,SS(1),0,1.0,0)

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 1) = VLoad_rms
      STOF(ISTOF + 2) = ILoad_rms
      STOF(ISTOF + 9) = PLoad
      STOF(ISTOF + 10) = QLoad
      STOF(ISTOF + 11) = VBus_1
      STOF(ISTOF + 12) = PLine1
      STOF(ISTOF + 13) = QLine1
      STOF(ISTOF + 14) = RT_1
      STOI(ISTOI + 1) = ENAB
      STOF(ISTOF + 15) = Rload
      STOF(ISTOF + 16) = Lload
      STOF(ISTOF + 17) = VBus_2
      STOF(ISTOF + 18) = PLine2
      STOF(ISTOF + 19) = QLine2
      STOF(ISTOF + 20) = VIBR_1
      STOF(ISTOF + 21) = PIBR_1
      STOF(ISTOF + 22) = QIBR_1
      STOF(ISTOF + 23) = Gen2_BRK
      STOI(ISTOI + 2) = IT_1
      STOI(ISTOI + 3) = BRK_IBRLine_1
      STOI(ISTOI + 4) = IT_2
      STOI(ISTOI + 5) = BRK_Line_1
      STOF(ISTOF + 27) = Tfault_Tline1
      STOF(ISTOF + 28) = Tclear_Tline1
      STOF(ISTOF + 29) = Ttrip_Tline1
      STOF(ISTOF + 30) = Tfault_IBR1
      STOF(ISTOF + 31) = Ttrip_IBR1
      STOF(ISTOF + 32) = Tclear_IBR1
      STOF(ISTOF + 33) = Delay_IBR
      STOF(ISTOF + 34) = IIBR_1
      STOF(ISTOF + 35) = PIBR1
      STOF(ISTOF + 36) = QIBR1
      STOF(ISTOF + 37) = VIBR1
      STOF(ISTOF + 38) = PIBR2
      STOF(ISTOF + 39) = QIBR2
      STOF(ISTOF + 40) = VIBR2
      STOF(ISTOF + 44) = PGen1
      STOF(ISTOF + 45) = QGen1
      STOF(ISTOF + 46) = VGen1
      STOF(ISTOF + 47) = PGen2
      STOF(ISTOF + 48) = QGen2
      STOF(ISTOF + 49) = VGen2

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 2 + IT_0) = VLoad_inst(IT_0)
         STOF(ISTOF + 5 + IT_0) = ILoad_inst(IT_0)
         STOF(ISTOF + 23 + IT_0) = Iflt_IBR_1(IT_0)
         STOF(ISTOF + 40 + IT_0) = Iflt_Line1(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    Gen1Out       ! 
      REAL    VBRANCH       ! 
      REAL    EMTDC_VVDC    ! 
      REAL    P3PH3         ! 
      REAL    Q3PH3         ! 
!     SUBR    DGTL_RMS3     ! '3 Phase Digital RMS Meter'
!     SUBR    DGTL_RMS3A    ! '3 Phase Digital RMS Meter'
!     SUBR    IBROut        ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices
      INTEGER  Bus_1(3), Bus_2(3), NT_2(3)
      INTEGER  NT_5(3), NT_7(3), NT_9(3)

! Control Signals
      REAL     VLoad_rms, ILoad_rms
      REAL     VLoad_inst(3), ILoad_inst(3)
      REAL     PLoad, QLoad, VBus_1, PLine1
      REAL     QLine1, VBus_2, PLine2, QLine2
      REAL     VIBR_1, PIBR_1, QIBR_1
      REAL     Iflt_IBR_1(3), IIBR_1, PIBR1
      REAL     QIBR1, VIBR1, PIBR2, QIBR2, VIBR2
      REAL     Iflt_Line1(3), PGen1, QGen1, VGen1
      REAL     PGen2, QGen2, VGen2

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER IPGB, ITXRX                         ! Control/Monitoring
      INTEGER ISUBS, SS(5), IBRCH(5), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      IPGB      = NPGB
      NPGB      = NPGB + 24
      ITXRX     = NTXRX
      NTXRX     = NTXRX + 1
      NCX       = NCX + 0
      INODE     = NNODE + 2
      NNODE     = NNODE + 68
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 6
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 5

      DO IT_0 = 1,5
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 42


      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 21


      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 6


      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 9


      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 9

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      VLoad_rms = STOF(ISTOF + 1)
      ILoad_rms = STOF(ISTOF + 2)
      PLoad    = STOF(ISTOF + 9)
      QLoad    = STOF(ISTOF + 10)
      VBus_1   = STOF(ISTOF + 11)
      PLine1   = STOF(ISTOF + 12)
      QLine1   = STOF(ISTOF + 13)
      VBus_2   = STOF(ISTOF + 17)
      PLine2   = STOF(ISTOF + 18)
      QLine2   = STOF(ISTOF + 19)
      VIBR_1   = STOF(ISTOF + 20)
      PIBR_1   = STOF(ISTOF + 21)
      QIBR_1   = STOF(ISTOF + 22)
      IIBR_1   = STOF(ISTOF + 34)
      PIBR1    = STOF(ISTOF + 35)
      QIBR1    = STOF(ISTOF + 36)
      VIBR1    = STOF(ISTOF + 37)
      PIBR2    = STOF(ISTOF + 38)
      QIBR2    = STOF(ISTOF + 39)
      VIBR2    = STOF(ISTOF + 40)
      PGen1    = STOF(ISTOF + 44)
      QGen1    = STOF(ISTOF + 45)
      VGen1    = STOF(ISTOF + 46)
      PGen2    = STOF(ISTOF + 47)
      QGen2    = STOF(ISTOF + 48)
      VGen2    = STOF(ISTOF + 49)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         VLoad_inst(IT_0) = STOF(ISTOF + 2 + IT_0)
         ILoad_inst(IT_0) = STOF(ISTOF + 5 + IT_0)
         Iflt_IBR_1(IT_0) = STOF(ISTOF + 23 + IT_0)
         Iflt_Line1(IT_0) = STOF(ISTOF + 40 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         Bus_1(IT_0) = NODE(INODE + 0 + IT_0)
         Bus_2(IT_0) = NODE(INODE + 3 + IT_0)
         NT_2(IT_0) = NODE(INODE + 12 + IT_0)
         NT_5(IT_0) = NODE(INODE + 21 + IT_0)
         NT_7(IT_0) = NODE(INODE + 27 + IT_0)
         NT_9(IT_0) = NODE(INODE + 33 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 40:[Gen1]  
      CALL Gen1Out()


! 50:[Gen1]  
      CALL Gen1Out()


! 70:[breaker3] 3 Phase Breaker 'Gen2_BRK'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+31), (IBRCH(1)+32), (IBRCH(1)+33),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 80:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+37), (IBRCH(1)+38),&
     & (IBRCH(1)+39),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1882353860,RVD1_1,"Pd")
      PGen1 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+37), (IBRCH(1)+38),&
     & (IBRCH(1)+39),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1882353860,RVD1_1,"Qd")
      QGen1 = RVD1_1
      CALL DGTL_RMS3(256,SS(1),NT_5(1),NT_5(2),NT_5(3),RTCF(IVD1_1+3),1.&
     &0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1882353860,RVD1_1,"Vd")
      VGen1 = RVD1_1
      CALL DGTL_RMS3A(256,( CBR((IBRCH(1)+37), SS(1))),( CBR((IBRCH(1)+3&
     &8), SS(1))),( CBR((IBRCH(1)+39), SS(1))),RTCF(IVD1_1+3),RTCF(IVD1_&
     &1+4),0.0,RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1882353860,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1882353860,1,"hide2")
      ENDIF

! 100:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+13), (IBRCH(1)+14),&
     & (IBRCH(1)+15),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,852853635,RVD1_1,"Pd")
      PLine1 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+13), (IBRCH(1)+14),&
     & (IBRCH(1)+15),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,852853635,RVD1_1,"Qd")
      QLine1 = RVD1_1
      CALL DGTL_RMS3(256,SS(1),Bus_1(1),Bus_1(2),Bus_1(3),RTCF(IVD1_1+3)&
     &,1.0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,852853635,RVD1_1,"Vd")
      VBus_1 = RVD1_1
      CALL DGTL_RMS3A(256,( CBR((IBRCH(1)+13), SS(1))),( CBR((IBRCH(1)+1&
     &4), SS(1))),( CBR((IBRCH(1)+15), SS(1))),RTCF(IVD1_1+3),RTCF(IVD1_&
     &1+4),0.0,RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,852853635,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,852853635,1,"hide2")
      ENDIF

! 110:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+40), (IBRCH(1)+41),&
     & (IBRCH(1)+42),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1911203582,RVD1_1,"Pd")
      PGen2 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+40), (IBRCH(1)+41),&
     & (IBRCH(1)+42),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1911203582,RVD1_1,"Qd")
      QGen2 = RVD1_1
      CALL DGTL_RMS3(256,SS(1),NT_7(1),NT_7(2),NT_7(3),RTCF(IVD1_1+3),1.&
     &0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1911203582,RVD1_1,"Vd")
      VGen2 = RVD1_1
      CALL DGTL_RMS3A(256,( CBR((IBRCH(1)+40), SS(1))),( CBR((IBRCH(1)+4&
     &1), SS(1))),( CBR((IBRCH(1)+42), SS(1))),RTCF(IVD1_1+3),RTCF(IVD1_&
     &1+4),0.0,RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1911203582,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1911203582,1,"hide2")
      ENDIF

! 120:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+28), (IBRCH(1)+29),&
     & (IBRCH(1)+30),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,702609968,RVD1_1,"Pd")
      PLine2 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+28), (IBRCH(1)+29),&
     & (IBRCH(1)+30),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,702609968,RVD1_1,"Qd")
      QLine2 = RVD1_1
      CALL DGTL_RMS3(256,SS(1),Bus_1(1),Bus_1(2),Bus_1(3),RTCF(IVD1_1+3)&
     &,1.0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,702609968,RVD1_1,"Vd")
      VBus_2 = RVD1_1
      CALL DGTL_RMS3A(256,( CBR((IBRCH(1)+28), SS(1))),( CBR((IBRCH(1)+2&
     &9), SS(1))),( CBR((IBRCH(1)+30), SS(1))),RTCF(IVD1_1+3),RTCF(IVD1_&
     &1+4),0.0,RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,702609968,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,702609968,1,"hide2")
      ENDIF

! 140:[ammeter] Current Meter 'Iflt_Line1'
      Iflt_Line1(1) = ( CBR((IBRCH(5)+7), SS(5)))
      Iflt_Line1(2) = ( CBR((IBRCH(5)+8), SS(5)))
      Iflt_Line1(3) = ( CBR((IBRCH(5)+9), SS(5)))

! 150:[pgb] Output Channel 'VBus_1'

      PGB(IPGB+1) = VBus_1

! 160:[pgb] Output Channel 'PLine1'

      PGB(IPGB+2) = PLine1

! 180:[pgb] Output Channel 'QLine1'

      PGB(IPGB+3) = QLine1

! 190:[pgb] Output Channel 'VBus_2'

      PGB(IPGB+4) = VBus_2

! 210:[pgb] Output Channel 'PLine2'

      PGB(IPGB+5) = PLine2

! 220:[pgb] Output Channel 'QLine2'

      PGB(IPGB+6) = QLine2

! 230:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(2), (IBRCH(2)+13), (IBRCH(2)+14),&
     & (IBRCH(2)+15),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,940846441,RVD1_1,"Pd")
      PIBR2 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(2), (IBRCH(2)+13), (IBRCH(2)+14),&
     & (IBRCH(2)+15),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,940846441,RVD1_1,"Qd")
      QIBR2 = RVD1_1
      CALL DGTL_RMS3(256,SS(2),Bus_2(1),Bus_2(2),Bus_2(3),RTCF(IVD1_1+3)&
     &,1.0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,940846441,RVD1_1,"Vd")
      VIBR2 = RVD1_1
      CALL DGTL_RMS3A(256,( CBR((IBRCH(2)+13), SS(2))),( CBR((IBRCH(2)+1&
     &4), SS(2))),( CBR((IBRCH(2)+15), SS(2))),RTCF(IVD1_1+3),RTCF(IVD1_&
     &1+4),0.0,RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,940846441,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,940846441,1,"hide2")
      ENDIF

! 240:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      ILoad_inst(1) = ( CBR((IBRCH(2)+7), SS(2)))
      ILoad_inst(2) = ( CBR((IBRCH(2)+8), SS(2)))
      ILoad_inst(3) = ( CBR((IBRCH(2)+9), SS(2)))
      VLoad_inst(1) = EMTDC_VVDC(SS(2), Bus_2(1), 0)
      VLoad_inst(2) = EMTDC_VVDC(SS(2), Bus_2(2), 0)
      VLoad_inst(3) = EMTDC_VVDC(SS(2), Bus_2(3), 0)
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(2), (IBRCH(2)+7), (IBRCH(2)+8), (&
     &IBRCH(2)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,696625225,RVD1_1,"Pd")
      PLoad = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(2), (IBRCH(2)+7), (IBRCH(2)+8), (&
     &IBRCH(2)+9),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,696625225,RVD1_1,"Qd")
      QLoad = RVD1_1
      CALL DGTL_RMS3(256,SS(2),Bus_2(1),Bus_2(2),Bus_2(3),RTCF(IVD1_1+3)&
     &,1.0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,696625225,RVD1_1,"Vd")
      VLoad_rms = RVD1_1
      CALL DGTL_RMS3A(256,( CBR((IBRCH(2)+7), SS(2))),( CBR((IBRCH(2)+8)&
     &, SS(2))),( CBR((IBRCH(2)+9), SS(2))),RTCF(IVD1_1+3),RTCF(IVD1_1+4&
     &),0.0,RVD1_1)
      ILoad_rms = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,696625225,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,696625225,1,"hide2")
      ENDIF

! 260:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(2), (IBRCH(2)+10), (IBRCH(2)+11),&
     & (IBRCH(2)+12),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1145887731,RVD1_1,"Pd")
      PIBR1 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(2), (IBRCH(2)+10), (IBRCH(2)+11),&
     & (IBRCH(2)+12),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1145887731,RVD1_1,"Qd")
      QIBR1 = RVD1_1
      CALL DGTL_RMS3(256,SS(2),NT_9(1),NT_9(2),NT_9(3),RTCF(IVD1_1+3),1.&
     &0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1145887731,RVD1_1,"Vd")
      VIBR1 = RVD1_1
      CALL DGTL_RMS3A(256,( CBR((IBRCH(2)+10), SS(2))),( CBR((IBRCH(2)+1&
     &1), SS(2))),( CBR((IBRCH(2)+12), SS(2))),RTCF(IVD1_1+3),RTCF(IVD1_&
     &1+4),0.0,RVD1_1)
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1145887731,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1145887731,1,"hide2")
      ENDIF

! 270:[ammeter] Current Meter 'Iflt_IBR_1'
      Iflt_IBR_1(1) = ( CBR((IBRCH(4)+7), SS(4)))
      Iflt_IBR_1(2) = ( CBR((IBRCH(4)+8), SS(4)))
      Iflt_IBR_1(3) = ( CBR((IBRCH(4)+9), SS(4)))

! 290:[pgb] Output Channel 'Iflt_IBR_1'

      DO IVD1_1 = 1, 3
         PGB(IPGB+7+IVD1_1-1) = Iflt_IBR_1(IVD1_1)
      ENDDO

! 310:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(3), (IBRCH(3)+1), (IBRCH(3)+2), (&
     &IBRCH(3)+3),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1226803396,RVD1_1,"Pd")
      PIBR_1 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(3), (IBRCH(3)+1), (IBRCH(3)+2), (&
     &IBRCH(3)+3),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1226803396,RVD1_1,"Qd")
      QIBR_1 = RVD1_1
      CALL DGTL_RMS3(256,SS(3),NT_2(1),NT_2(2),NT_2(3),RTCF(IVD1_1+3),1.&
     &0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1226803396,RVD1_1,"Vd")
      VIBR_1 = RVD1_1
      CALL DGTL_RMS3A(256,( CBR((IBRCH(3)+1), SS(3))),( CBR((IBRCH(3)+2)&
     &, SS(3))),( CBR((IBRCH(3)+3), SS(3))),RTCF(IVD1_1+3),RTCF(IVD1_1+4&
     &),0.0,RVD1_1)
      IIBR_1 = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1226803396,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1226803396,1,"hide2")
      ENDIF

! 320:[IBR]  
      CALL IBROut()


! 380:[breaker3] 3 Phase Breaker 'BRK_IBRLine_1'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(3), (IBRCH(3)+4), (IBRCH(3)+5), (IBRCH(3)+6),0,0&
     &,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 390:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!

! 400:[pgb] Output Channel 'QIBR_1'

      PGB(IPGB+10) = QIBR_1

! 410:[pgb] Output Channel 'PIBR_1'

      PGB(IPGB+11) = PIBR_1

! 420:[pgb] Output Channel 'VIBR_1'

      PGB(IPGB+12) = VIBR_1

! 430:[breaker3] 3 Phase Breaker 'BRK_IBRLine_1'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(2), (IBRCH(2)+16), (IBRCH(2)+17), (IBRCH(2)+18),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 440:[breaker3] 3 Phase Breaker 'BRK_Line_1'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(2), (IBRCH(2)+19), (IBRCH(2)+20), (IBRCH(2)+21),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 470:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!

! 480:[pgb] Output Channel 'QLoad'

      PGB(IPGB+15) = QLoad

! 490:[breaker3] 3 Phase Breaker 'BRK_Line_1'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+34), (IBRCH(1)+35), (IBRCH(1)+36),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 500:[pgb] Output Channel 'PLoad'

      PGB(IPGB+16) = PLoad

! 510:[pgb] Output Channel 'ILoad_inst'

      DO IVD1_1 = 1, 3
         PGB(IPGB+17+IVD1_1-1) = ILoad_inst(IVD1_1)
      ENDDO

! 520:[pgb] Output Channel 'VLoad_inst'

      DO IVD1_1 = 1, 3
         PGB(IPGB+20+IVD1_1-1) = VLoad_inst(IVD1_1)
      ENDDO

! 530:[pgb] Output Channel 'ILoad_rms'

      PGB(IPGB+23) = ILoad_rms

! 540:[pgb] Output Channel 'VLoad_rms'

      PGB(IPGB+24) = VLoad_rms

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 1) = VLoad_rms
      STOF(ISTOF + 2) = ILoad_rms
      STOF(ISTOF + 9) = PLoad
      STOF(ISTOF + 10) = QLoad
      STOF(ISTOF + 11) = VBus_1
      STOF(ISTOF + 12) = PLine1
      STOF(ISTOF + 13) = QLine1
      STOF(ISTOF + 17) = VBus_2
      STOF(ISTOF + 18) = PLine2
      STOF(ISTOF + 19) = QLine2
      STOF(ISTOF + 20) = VIBR_1
      STOF(ISTOF + 21) = PIBR_1
      STOF(ISTOF + 22) = QIBR_1
      STOF(ISTOF + 34) = IIBR_1
      STOF(ISTOF + 35) = PIBR1
      STOF(ISTOF + 36) = QIBR1
      STOF(ISTOF + 37) = VIBR1
      STOF(ISTOF + 38) = PIBR2
      STOF(ISTOF + 39) = QIBR2
      STOF(ISTOF + 40) = VIBR2
      STOF(ISTOF + 44) = PGen1
      STOF(ISTOF + 45) = QGen1
      STOF(ISTOF + 46) = VGen1
      STOF(ISTOF + 47) = PGen2
      STOF(ISTOF + 48) = QGen2
      STOF(ISTOF + 49) = VGen2

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 2 + IT_0) = VLoad_inst(IT_0)
         STOF(ISTOF + 5 + IT_0) = ILoad_inst(IT_0)
         STOF(ISTOF + 23 + IT_0) = Iflt_IBR_1(IT_0)
         STOF(ISTOF + 40 + IT_0) = Iflt_Line1(IT_0)
      END DO


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainDyn_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    Gen1Dyn_Begin  ! 
!     SUBR    IBRDyn_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ICX, ITXRX                          ! Control/Monitoring
      INTEGER ISUBS, SS(5), IBRCH(5), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ITXRX     = NTXRX
      NTXRX     = NTXRX + 1
      ICX       = NCX
      NCX       = NCX + 6
      INODE     = NNODE + 2
      NNODE     = NNODE + 68
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 6
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 5

      DO IT_0 = 1,5
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 42


      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 21


      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 6


      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 9


      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 9

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[time-sig] Output of Simulation Time 

! 20:[compare] Single Input Level Comparator 

! 30:[radiolink] Wireless connection 'ENAB'

! 40:[Gen1]  
      CALL Gen1Dyn_Begin()


! 50:[Gen1]  
      CALL Gen1Dyn_Begin()


! 60:[var_switch] Two State Switch 'Gen2_switch'

! 70:[breaker3] 3 Phase Breaker 'Gen2_BRK'
      CALL COMPONENT_ID(ICALL_NO,43999935)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 90:[var] Variable Input Slider 'TfaultSlider_Tline1'

! 130:[var] Variable Input Slider 'TfaultSlider_IBR1'

! 200:[var] Variable Input Slider 'Tclear_IBR1'

! 250:[fixed_load] Fixed Load 
      CALL COMPONENT_ID(ICALL_NO,355718081)
      CALL LOAD1P2_CFG(0,1,132.790562,1.0,60.0,40.0,10.0,10.0,0.0,0.0,2.&
     &0,2.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0)

! 300:[var] Variable Input Slider 'Tclear_Tline1'

! 320:[IBR]  
      CALL IBRDyn_Begin()


! 330:[var] Variable Input Slider 'Sld_Delay_IBR'

! 340:[sumjct] Summing/Differencing Junctions 

! 350:[sumjct] Summing/Differencing Junctions 

! 380:[breaker3] 3 Phase Breaker 'BRK_IBRLine_1'
      CALL COMPONENT_ID(ICALL_NO,1590690971)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 390:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 430:[breaker3] 3 Phase Breaker 'BRK_IBRLine_1'
      CALL COMPONENT_ID(ICALL_NO,1630473859)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 440:[breaker3] 3 Phase Breaker 'BRK_Line_1'
      CALL COMPONENT_ID(ICALL_NO,823589780)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 450:[pgb] Output Channel 'Lload'

! 460:[pgb] Output Channel 'Rload'

! 470:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 490:[breaker3] 3 Phase Breaker 'BRK_Line_1'
      CALL COMPONENT_ID(ICALL_NO,2028368394)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
      CALL COMPONENT_ID(ICALL_NO,1378568995)
      RVD1_1 = ONE_3RD*120.0
      RVD1_2 = 13.8*SQRT_1BY3
      RVD1_3 = 230.0*SQRT_1BY3
      CALL E_TF2W_CFG((IXFMR + 1),0,RVD1_1,60.0,0.12,0.0,RVD1_2,RVD1_3,2&
     &.0)
      CALL E_TF2W_CFG((IXFMR + 2),0,RVD1_1,60.0,0.12,0.0,RVD1_2,RVD1_3,2&
     &.0)
      CALL E_TF2W_CFG((IXFMR + 3),0,RVD1_1,60.0,0.12,0.0,RVD1_2,RVD1_3,2&
     &.0)
      IF (0.0 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.0
        RVD1_4 = 6.0/(120.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH(1)+1),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+2),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+3),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+4),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+5),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+6),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT2_CFG(2, (IBRCH(1)+7), (IBRCH(1)+8), (IBRCH(1)+9), (IBRCH&
     &(1)+10), (IBRCH(1)+11), (IBRCH(1)+12),0,0,0,0,0,0,SS(1),RVD1_1,0.2&
     &,1.17,60.0,0.0,2.0,0.0,0.12,0.0,0.0,0.0,0.0,0.0,RVD1_2,RVD1_3,0.0,&
     &0.0)

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
      CALL COMPONENT_ID(ICALL_NO,2065400167)
      RVD1_1 = ONE_3RD*120.0
      RVD1_2 = 13.8*SQRT_1BY3
      RVD1_3 = 230.0*SQRT_1BY3
      CALL E_TF2W_CFG((IXFMR + 4),0,RVD1_1,60.0,0.12,0.0,RVD1_2,RVD1_3,2&
     &.0)
      CALL E_TF2W_CFG((IXFMR + 5),0,RVD1_1,60.0,0.12,0.0,RVD1_2,RVD1_3,2&
     &.0)
      CALL E_TF2W_CFG((IXFMR + 6),0,RVD1_1,60.0,0.12,0.0,RVD1_2,RVD1_3,2&
     &.0)
      IF (0.0 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.0
        RVD1_4 = 6.0/(120.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH(1)+16),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+17),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+18),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+19),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+20),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+21),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT2_CFG(2, (IBRCH(1)+22), (IBRCH(1)+23), (IBRCH(1)+24), (IB&
     &RCH(1)+25), (IBRCH(1)+26), (IBRCH(1)+27),0,0,0,0,0,0,SS(1),RVD1_1,&
     &0.2,1.17,60.0,0.0,2.0,0.0,0.12,0.0,0.0,0.0,0.0,0.0,RVD1_2,RVD1_3,0&
     &.0,0.0)

      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    Gen1Out_Begin  ! 
!     SUBR    IBROut_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  Bus_2(3)

! Control Signals

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ITXRX                               ! Control/Monitoring
      INTEGER ISUBS, SS(5), IBRCH(5), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ITXRX     = NTXRX
      NTXRX     = NTXRX + 1
      NCX       = NCX + 0
      INODE     = NNODE + 2
      NNODE     = NNODE + 68
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 6
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 5

      DO IT_0 = 1,5
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 42


      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 21


      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 6


      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 9


      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 9

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         Bus_2(IT_0) = NODE(INODE + 3 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 40:[Gen1]  
      CALL Gen1Out_Begin()


! 50:[Gen1]  
      CALL Gen1Out_Begin()


! 80:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+4) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+4) = 1.0
      ENDIF

! 100:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+4) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+4) = 1.0
      ENDIF

! 110:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+4) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+4) = 1.0
      ENDIF

! 120:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+4) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+4) = 1.0
      ENDIF

! 150:[pgb] Output Channel 'VBus_1'

! 160:[pgb] Output Channel 'PLine1'

! 180:[pgb] Output Channel 'QLine1'

! 190:[pgb] Output Channel 'VBus_2'

! 210:[pgb] Output Channel 'PLine2'

! 220:[pgb] Output Channel 'QLine2'

! 230:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+4) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+4) = 1.0
      ENDIF

! 240:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+4) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+4) = 1.0
      ENDIF

! 260:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+4) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+4) = 1.0
      ENDIF

! 290:[pgb] Output Channel 'Iflt_IBR_1'

! 310:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 60.0
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+4) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+4) = 1.0
      ENDIF

! 320:[IBR]  
      CALL IBROut_Begin()


! 400:[pgb] Output Channel 'QIBR_1'

! 410:[pgb] Output Channel 'PIBR_1'

! 420:[pgb] Output Channel 'VIBR_1'

! 480:[pgb] Output Channel 'QLoad'

! 500:[pgb] Output Channel 'PLoad'

! 510:[pgb] Output Channel 'ILoad_inst'

! 520:[pgb] Output Channel 'VLoad_inst'

! 530:[pgb] Output Channel 'ILoad_rms'

! 540:[pgb] Output Channel 'VLoad_rms'

      RETURN
      END

